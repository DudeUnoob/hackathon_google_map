<!doctype html>
<html>
  <head>
    <title>Pollution Patrol</title>
    <script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@100..900&display=swap" rel="stylesheet">
    <style>
      #map {
        height: 400px;
        width: 100%;
      } 
      html, body {
        height: 100%;
        margin: 0;
        padding: 0;
      }

      #map {
      height: 70vh;
      width: 100%;
    }

    body {
      text-align: center;
      height: 100%;
      margin: 0;
      padding: 0;
      font-family: "Inter";
      font-weight: bold;
      background-color: #1e1e1e;
    }

    h3 {
      font-size: 4vh;
      color: white;
      margin-top: 4vh;
    }

    .buttons {
        height: 5vh;
        width: 8vw;
        margin-top: 4vh;
        margin-left: 0.5vw;
        margin-right: 0.5vw;
        border-radius: 10px;
        font-weight: bold;
        font-size: 1.25vh;
        color: white;
        background-color: #303030;
        border: none;
        padding-left: 0.5vw;
        padding-right: 0.5vw;
    }

    .buttonDiv {
      display: flex;
      justify-content: center;
    } 
    </style>
  </head>
  <body>
    <h3>Pollution Patrol</h3>
    <div id="map"></div>
    <button onclick="createNewMarker()" class="buttons">Create a New Marker</button>
    <button onclick="removeUserMarker()" class="buttons">Remove My Last Marker</button>
    <button onclick="clearAllMarkers()" class="buttons">Clear All Markers</button>

    <script>
      let map;
      let infoWindow;
      let markers = [];

      async function initMap() {
        const { Map, InfoWindow } = await google.maps.importLibrary("maps");
        
        map = new Map(document.getElementById("map"), {
          center: { lat: 37.39094933041195, lng: -122.02503913145092 },
          zoom: 14,
          mapId: "4504f8b37365c3d0",
        });
        
        infoWindow = new InfoWindow();
        
        // Fetch markers from the API and render them
        fetchAndRenderMarkers();
      }

      async function fetchAndRenderMarkers() {
        try {
          const response = await fetch('/api/getMarkers', {
            method: "GET",
            headers: {
              'Content-Type': 'application/json'
            }
          });
          const data = await response.json();
          console.log(data);
          renderMarkers(data);
        } catch (error) {
          console.error('Error fetching markers:', error);
        }
      }

      async function renderMarkers(markersData) {
        const { AdvancedMarkerElement } = await google.maps.importLibrary("marker");

        markersData.data.forEach(markerData => {
          const marker = new AdvancedMarkerElement({
            map,
            position: { lat: markerData.lat, lng: markerData.lng },
            gmpDraggable: true,
            title: `Marker by ${markerData.username}`,
          });

          markers.push(marker);

          marker.addListener("click", () => {
            infoWindow.close();
            infoWindow.setContent(`<div>Created by: ${markerData.username}<br>Position: ${markerData.lat}, ${markerData.lng}</div>`);
            infoWindow.open(marker.map, marker);
          });

          marker.addListener("dragend", (event) => {
            const position = marker.position;
            console.log(`Marker moved to: ${position.lat}, ${position.lng}`);
            updateMarkerPosition(marker, markerData.username);
          });
        });
      }

      async function createNewMarker() {
    if (!map) {
        console.error("Map not initialized");
        return;
    }

    const { AdvancedMarkerElement } = await google.maps.importLibrary("marker");

    const username = "test"; // You might want to get this from the current user's session

    const newMarker = new AdvancedMarkerElement({
        map,
        position: { lat: 37.7870889413597, lng: -122.42503913145092 },
        gmpDraggable: true,
        title: `Marker by ${username}`,
    });

    newMarker.addListener("click", () => {
        infoWindow.close();
        infoWindow.setContent(`<div>Created by: ${username}<br>Position: ${newMarker.position.lat}, ${newMarker.position.lng}</div>`);
        infoWindow.open(newMarker.map, newMarker);
    });

    newMarker.addListener("dragend", (event) => {
        const position = newMarker.position;
        console.log(`Marker moved to: ${position.lat}, ${position.lng}`);
        updateMarkerPosition(newMarker, username);
    });

    // Create the marker in the database
    const response = await fetch("/api/updateMarkers", {
        method: "POST",
        headers: {
            "Content-Type": "application/json"
        },
        body: JSON.stringify({
            markers: [{lat: newMarker.position.lat, lng: newMarker.position.lng, username: username}]
        })
    });

    const data = await response.json();
    console.log(data);

    if (data.marker) {
    newMarker.userData = data.marker;
}

    markers.push(newMarker);
    map.panTo(newMarker.position);
}

function updateMarkerPosition(marker, username) {
    const position = marker.position;

    fetch("/api/updateMarkers", {
        method: "POST",
        headers: {
            "Content-Type": "application/json"
        },
        body: JSON.stringify({
            markers: [{lat: position.lat, lng: position.lng, username: username}]
        })
    })
    .then(res => res.json())
    .then(data => {
        console.log(data);
        // Update the marker's data if it's a new marker
        if (data.marker) {
    marker.userData = data.marker;
}
    })
    .catch(error => console.error('Error:', error));

    infoWindow.close();
    infoWindow.setContent(`<div>Created by: ${username}<br>Position: ${position.lat}, ${position.lng}</div>`);
    infoWindow.open(marker.map, marker);
}

      async function removeUserMarker() {
        if (!markers.length) {
          console.log("No markers to remove");
          return;
        }

        try {
          const response = await fetch('/api/removeMarker', {
            method: 'DELETE',
            headers: {
              'Content-Type': 'application/json'
            }
          });

          if (response.ok) {
            const result = await response.json();
            if (result.removed) {
              // Remove the marker from the map and the markers array
              const index = markers.findIndex(marker => 
                marker.position.lat === result.removed.lat && 
                marker.position.lng === result.removed.lng
              );
              if (index !== -1) {
                markers[index].map = null;
                markers.splice(index, 1);
                console.log("Marker removed. Remaining markers:", markers.length);
              }
            } else {
              console.log("No markers found for the current user");
            }
          } else {
            console.log("Failed to remove marker");
          }
        } catch (error) {
          console.error('Error removing marker:', error);
        }
      }

      function clearAllMarkers(){
        markers.forEach(marker => marker.map = null);
        markers = [];
        console.log("All markers have been cleared");
      }

      initMap();
    </script>
    <script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyD6XvjRnSbCvqsI9gSV0B9BrfIh3vCjRBU&callback=initMap"></script>
  </body>
</html>